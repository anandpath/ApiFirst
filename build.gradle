plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'project-report'
    id 'maven-publish'
    id 'org.openapi.generator' version '5.4.0'
    id 'io.freefair.lombok' version '6.4.1'
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.sonarqube' version '3.3'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
}

ext {
    basePackage = 'in.anandpath'
    spec = "$rootDir/api.yaml"
    generatedSourcesDir = "$buildDir/generated/sources/openapi"
}

//apply from: 'version.gradle'
version '1.0-SNAPSHOT'
group basePackage

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint:none']
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            limit {
//                minimum = 0.5
//            }
//        }
//
//        rule {
//            enabled = false
//            element = 'CLASS'
//            includes = ['org.gradle.*']
//
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 0.3
//            }
//        }
//    }
//}

bootJar {
    layered {
        enabled = true
    }
//    manifest {
//        attributes(
//                'Built-With': "Gradle - ${project.getGradle().getGradleVersion()}",
//                'Created-By': 'Anand Pathak: ' + System.properties['java.version'] + ' (' + System.properties['java.vendor'] + ')',
//                'Name': project.name,
//                'Version': project.version
//        )
//    }
}

configurations {
    testImplementation.extendsFrom compileOnly
    inteTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output + test.output
        runtimeClasspath += sourceSets.main.output + test.output
    }
}

tasks.withType(Test) {
    testTask ->
        useJUnitPlatform()
        include('**/*Test.class', '**/*Tests.class')
        maxParallelForks = 1
        testLogging {
            events 'failed'
            exceptionFormat 'short'

//            debug {
//                events 'started', 'skipped', 'failed'
//                exceptionFormat 'full'
//                showStandardStreams = true
//            }
        }
        reports.html.enabled(true)
        reports.junitXml.enabled(true)
}

jacocoTestReport {
    executionData test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('/reports/coverage')
    }
}

openApiGenerate {
    globalProperties = [
            apis: '',
            models: '',
            supportingFiles: ''
    ]
    setGeneratorName("spring")
    setInputSpec(spec)
    setOutputDir(generatedSourcesDir)
    apiPackage = "${project.basePackage}.api" as Object
    modelPackage = "${project.basePackage}.model" as Object
    setModelFilesConstrainedTo([])
    setConfigOptions(
            [
                    dateLibrary         : 'java8',
                    interfaceOnly       : 'true',
                    java8               : 'true',
                    serializableModel   : 'true',
                    serializationLibrary: 'jackson',
                    useBeanValidation   : 'true',
                    useTags             : 'true'
            ]
    )
}


sourceSets {
    main {
        java {
            srcDir("${generatedSourcesDir}/src/main/java")
        }
    }
}

compileJava {
    dependsOn 'openApiGenerate'
}

afterEvaluate {
    project ->
        project.tasks.openApiGenerate {
            inputs.file spec
            outputs.dir generatedSourcesDir
        }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.3'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.13'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.2'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools:2.6.3'
}
