plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'project-report'
    id 'maven-publish'
    id 'org.openapi.generator' version '6.3.0'
    id 'io.freefair.lombok' version '6.4.1'
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
}

ext {
    basePackage = 'in.anandpath.sample'
    versions =[:]
    spec = "$rootDir/api.yaml"
    generatedSourcesDir = "$buildDir/generated/sources/openapi"
}
versions = [
        spring_boot : '2.7.13',
        wiremock    : '2.27.2',
        jupiter_junit : '5.9.2',
        mapstruct   : '1.4.2.final',
        jackson_nullable: '0.2.4',
        validation : '3.0.2',
        spring_doc: '1.6.14'
]

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:${versions.spring_boot}")
    implementation "org.springframework.boot:spring-boot-starter:${versions.spring_boot}"
    implementation "org.springframework.boot:spring-boot-starter-web:${versions.spring_boot}"
    //implementation "javax.validation:validation-api:${versions.validation}"
    implementation "org.openapitools:jackson-databind-nullable:${versions.jackson_nullable}"
    implementation "org.springdoc:springdoc-openapi-ui:${versions.spring_doc}"

    developmentOnly "org.springframework.boot:spring-boot-devtools:${versions.spring_boot}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.jupiter_junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.jupiter_junit}"
}


//apply from: 'version.gradle'
version '1.0-SNAPSHOT'
group basePackage

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint:none']
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            limit {
//                minimum = 0.5
//            }
//        }
//
//        rule {
//            enabled = false
//            element = 'CLASS'
//            includes = ['org.gradle.*']
//
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 0.3
//            }
//        }
//    }
//}

bootJar {
    layered {
        enabled = true
    }
//    manifest {
//        attributes(
//                'Built-With': "Gradle - ${project.getGradle().getGradleVersion()}",
//                'Created-By': 'Anand Pathak: ' + System.properties['java.version'] + ' (' + System.properties['java.vendor'] + ')',
//                'Name': project.name,
//                'Version': project.version
//        )
//    }
}

configurations {
    testImplementation.extendsFrom compileOnly
    inteTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output + test.output
        runtimeClasspath += sourceSets.main.output + test.output
    }
}

tasks.withType(Test) {
    testTask ->
        useJUnitPlatform()
        include('**/*Test.class', '**/*Tests.class')
        maxParallelForks = 1
        testLogging {
            events 'failed'
            exceptionFormat 'short'

//            debug {
//                events 'started', 'skipped', 'failed'
//                exceptionFormat 'full'
//                showStandardStreams = true
//            }
        }
        reports.html.enabled(true)
        reports.junitXml.enabled(true)
}

jacocoTestReport {
    executionData test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('/reports/coverage')
    }
}

openApiGenerate {
    globalProperties = [
            apis: '',
            models: '',
            supportingFiles: ''
    ]
    setGeneratorName("spring")
    inputSpec = spec
    setOutputDir(generatedSourcesDir)
    apiPackage = "${project.basePackage}.api" as Object
    modelPackage = "${project.basePackage}.model" as Object
    setModelFilesConstrainedTo([])
    setConfigOptions(
            [
                    interfaceOnly       : 'true',
                    serializableModel   : 'true',
                    serializationLibrary: 'jackson',
                    useBeanValidation   : 'true',
                    useTags             : 'true'
            ]
    )
}


sourceSets {
    main {
        java {
            srcDir files("$generatedSourcesDir/src/main/java").builtBy('openApiGenerate')
        }
    }
}

compileJava {
    dependsOn 'openApiGenerate'
}

afterEvaluate {
    project ->
        project.tasks.openApiGenerate {
            inputs.file spec
            outputs.dir generatedSourcesDir
        }
}


